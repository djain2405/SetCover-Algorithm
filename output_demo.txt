E:\Downloaded>java -jar Naive.jar
NAIVE BASELINE ALGORITHM


60 40 90 87 56 51 39 55 20 27 47 77 35
76 83 85 24 65 58 31 64 6 62 48 51 94
48 60 56 41 91 2 8 28 92 79 49 44 97
63 0 65 13 60 64 50 66 56 81 96 75 19
69 20 81 49 10 64 11 67 75 35 93 97 60
55 87 89 85 56 79 13 37 70 82 5 39 49
72 1 91 53 5 11 87 68 54 7 97 38 33
7 6 86 13 41 48 8 71 0 87 12 58 78
91 65 94 98 17 40 44 97 76 32 35 60 70
43 32 63 78 74 53 3 58 40 87 27 98 96
46 43 5 73 26 27 88 41 94 44 74 98 82
52 3 66 96 31 93 55 63 9 85 13 99 69
54 44 72 40 35 67 45 81 19 94 62 10 79
48 39 11 57 90 42 83 8 34 94 25 13 23
55 92 21 59 63 7 14 5 6 85 24 22 43
19 80 7 27 91 46 35 65 82 60 97 0 17
10 3 7 58 70 78 99 39 42 27 79 51 33
57 7 93 0 2 86 66 13 54 61 98 37 31
90 73 43 92 58 87 7 72 9 98 86 42 84
63 7 54 36 17 37 88 65 24 29 10 6 14
16 67 5 89 45 25 20 49 87 96 12 63 22
20 69 26 9 27 51 68 42 46 36 98 21 57
5 83 42 70 99 64 66 13 96 17 27 61 40
31 1 23 57 32 60 76 79 13 70 50 43 91
14 74 26 93 86 17 58 24 55 60 76 81 25

25 rows...
Time for execution : 7m and 45s
The minimum number of sets required is : 16

1. [60, 40, 90, 87, 56, 51, 39, 55, 20, 27, 47, 77, 35]
2. [76, 83, 85, 24, 65, 58, 31, 64, 6, 62, 48, 51, 94]
3. [48, 60, 56, 41, 91, 2, 8, 28, 92, 79, 49, 44, 97]
4. [63, 0, 65, 13, 60, 64, 50, 66, 56, 81, 96, 75, 19]
5. [72, 1, 91, 53, 5, 11, 87, 68, 54, 7, 97, 38, 33]
6. [7, 6, 86, 13, 41, 48, 8, 71, 0, 87, 12, 58, 78]
7. [91, 65, 94, 98, 17, 40, 44, 97, 76, 32, 35, 60, 70]
8. [46, 43, 5, 73, 26, 27, 88, 41, 94, 44, 74, 98, 82]
9. [52, 3, 66, 96, 31, 93, 55, 63, 9, 85, 13, 99, 69]
10. [48, 39, 11, 57, 90, 42, 83, 8, 34, 94, 25, 13, 23]
11. [55, 92, 21, 59, 63, 7, 14, 5, 6, 85, 24, 22, 43]
12. [19, 80, 7, 27, 91, 46, 35, 65, 82, 60, 97, 0, 17]
13. [57, 7, 93, 0, 2, 86, 66, 13, 54, 61, 98, 37, 31]
14. [90, 73, 43, 92, 58, 87, 7, 72, 9, 98, 86, 42, 84]
15. [63, 7, 54, 36, 17, 37, 88, 65, 24, 29, 10, 6, 14]
16. [16, 67, 5, 89, 45, 25, 20, 49, 87, 96, 12, 63, 22]



E:\Downloaded>java -jar Efficient.jar
SET COVER EFFICIENT ALGORITHM


60 40 90 87 56 51 39 55 20 27 47 77 35
76 83 85 24 65 58 31 64 6 62 48 51 94
48 60 56 41 91 2 8 28 92 79 49 44 97
63 0 65 13 60 64 50 66 56 81 96 75 19
69 20 81 49 10 64 11 67 75 35 93 97 60
55 87 89 85 56 79 13 37 70 82 5 39 49
72 1 91 53 5 11 87 68 54 7 97 38 33
7 6 86 13 41 48 8 71 0 87 12 58 78
91 65 94 98 17 40 44 97 76 32 35 60 70
43 32 63 78 74 53 3 58 40 87 27 98 96
46 43 5 73 26 27 88 41 94 44 74 98 82
52 3 66 96 31 93 55 63 9 85 13 99 69
54 44 72 40 35 67 45 81 19 94 62 10 79
48 39 11 57 90 42 83 8 34 94 25 13 23
55 92 21 59 63 7 14 5 6 85 24 22 43
19 80 7 27 91 46 35 65 82 60 97 0 17
10 3 7 58 70 78 99 39 42 27 79 51 33
57 7 93 0 2 86 66 13 54 61 98 37 31
90 73 43 92 58 87 7 72 9 98 86 42 84
63 7 54 36 17 37 88 65 24 29 10 6 14
16 67 5 89 45 25 20 49 87 96 12 63 22
20 69 26 9 27 51 68 42 46 36 98 21 57
5 83 42 70 99 64 66 13 96 17 27 61 40
31 1 23 57 32 60 76 79 13 70 50 43 91
14 74 26 93 86 17 58 24 55 60 76 81 25


1. [60, 40, 90, 87, 56, 51, 39, 55, 20, 27, 47, 77, 35]
2. [76, 83, 85, 24, 65, 58, 31, 64, 6, 62, 48, 51, 94]
3. [48, 60, 56, 41, 91, 2, 8, 28, 92, 79, 49, 44, 97]
4. [63, 0, 65, 13, 60, 64, 50, 66, 56, 81, 96, 75, 19]
5. [72, 1, 91, 53, 5, 11, 87, 68, 54, 7, 97, 38, 33]
6. [46, 43, 5, 73, 26, 27, 88, 41, 94, 44, 74, 98, 82]
7. [69, 10, 11, 67, 93]
8. [86, 71, 12, 78]
9. [52, 3, 93, 9, 99, 69]
10. [57, 42, 34, 25, 23]
11. [21, 59, 14, 22]
12. [36, 17, 37, 29, 10, 14]
13. [89, 37, 70]
14. [16, 89, 45]
15. [84]
16. [80]
17. [32]
18. [61]

Time for execution : 0m and 0s
The minimum number of sets required is : 18